// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/MsgOthelloGame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QiLieGuaner.OthelloGame {

  /// <summary>Holder for reflection information generated from Proto/MsgOthelloGame.proto</summary>
  public static partial class MsgOthelloGameReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/MsgOthelloGame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgOthelloGameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpQcm90by9Nc2dPdGhlbGxvR2FtZS5wcm90bxIXUWlMaWVHdWFuZXIuT3Ro",
            "ZWxsb0dhbWUiGQoXVHVyblRvTmV4dFBsYXllclJlcXVlc3QiVQoXVHVyblRv",
            "TmV4dFBsYXllclJlY2VpdmUSEgoKcGxheWVyR1VJRBgBIAEoBRIPCgdjaGFp",
            "cklEGAIgASgFEhUKDWFjdGl2ZVBvc0luZm8YAyABKAkiPwoTUHV0RG93blBp",
            "ZWNlUmVxdWVzdBISCgpwbGF5ZXJHVUlEGAEgASgFEgkKAXgYAiABKAUSCQoB",
            "eRgDIAEoBSKsAQoTUHV0RG93blBpZWNlUmVjZWl2ZRISCgpwbGF5ZXJHVUlE",
            "GAEgASgFEg0KBXN0YXRlGAIgASgFEgkKAXgYAyABKAUSCQoBeRgEIAEoBRIN",
            "CgVjb2xvchgFIAEoBRIbChN0cmFuc2xhdGVQaWVjZXNJbmZvGAYgASgJEhcK",
            "D2JsYWNrUGllY2VDb3VudBgHIAEoBRIXCg93aGl0ZVBpZWNlQ291bnQYCCAB",
            "KAUiFQoTUmVjb25uZWN0aW9uUmVxdWVzdCKlAgoTUmVjb25uZWN0aW9uUmVj",
            "ZWl2ZRISCgpwbGF5ZXJHVUlEGAEgASgFEhUKDXBsYXllckNoYWlySUQYAiAB",
            "KAUSFAoMcGxheWVyQW1vdW50GAMgASgFEhAKCHJvb21OYW1lGAQgASgJEg4K",
            "BnJvb21JRBgFIAEoCRIYChBvdXRDYXJkQ291bnRkb3duGAYgASgFEhYKDnBs",
            "YXllck5hbWVMaXN0GAcgAygJEhcKD3BsYXllclNjb3JlTGlzdBgIIAMoBRIY",
            "ChBwbGF5ZXJBdmF0YXJMaXN0GAkgAygFEhgKEHBpZWNlc0luZm9TdHJpbmcY",
            "CiABKAkSFQoNYWN0aXZlQ2hhaXJJRBgLIAEoBRIVCg1hY3RpdmVQb3NJbmZv",
            "GAwgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.OthelloGame.TurnToNextPlayerRequest), global::QiLieGuaner.OthelloGame.TurnToNextPlayerRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.OthelloGame.TurnToNextPlayerReceive), global::QiLieGuaner.OthelloGame.TurnToNextPlayerReceive.Parser, new[]{ "PlayerGUID", "ChairID", "ActivePosInfo" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.OthelloGame.PutDownPieceRequest), global::QiLieGuaner.OthelloGame.PutDownPieceRequest.Parser, new[]{ "PlayerGUID", "X", "Y" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.OthelloGame.PutDownPieceReceive), global::QiLieGuaner.OthelloGame.PutDownPieceReceive.Parser, new[]{ "PlayerGUID", "State", "X", "Y", "Color", "TranslatePiecesInfo", "BlackPieceCount", "WhitePieceCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.OthelloGame.ReconnectionRequest), global::QiLieGuaner.OthelloGame.ReconnectionRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.OthelloGame.ReconnectionReceive), global::QiLieGuaner.OthelloGame.ReconnectionReceive.Parser, new[]{ "PlayerGUID", "PlayerChairID", "PlayerAmount", "RoomName", "RoomID", "OutCardCountdown", "PlayerNameList", "PlayerScoreList", "PlayerAvatarList", "PiecesInfoString", "ActiveChairID", "ActivePosInfo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///轮到下一个玩家操作的请求
  /// </summary>
  public sealed partial class TurnToNextPlayerRequest : pb::IMessage<TurnToNextPlayerRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TurnToNextPlayerRequest> _parser = new pb::MessageParser<TurnToNextPlayerRequest>(() => new TurnToNextPlayerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnToNextPlayerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.OthelloGame.MsgOthelloGameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToNextPlayerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToNextPlayerRequest(TurnToNextPlayerRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToNextPlayerRequest Clone() {
      return new TurnToNextPlayerRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnToNextPlayerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnToNextPlayerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnToNextPlayerRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///轮到下一个玩家操作的响应
  /// </summary>
  public sealed partial class TurnToNextPlayerReceive : pb::IMessage<TurnToNextPlayerReceive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TurnToNextPlayerReceive> _parser = new pb::MessageParser<TurnToNextPlayerReceive>(() => new TurnToNextPlayerReceive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnToNextPlayerReceive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.OthelloGame.MsgOthelloGameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToNextPlayerReceive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToNextPlayerReceive(TurnToNextPlayerReceive other) : this() {
      playerGUID_ = other.playerGUID_;
      chairID_ = other.chairID_;
      activePosInfo_ = other.activePosInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToNextPlayerReceive Clone() {
      return new TurnToNextPlayerReceive(this);
    }

    /// <summary>Field number for the "playerGUID" field.</summary>
    public const int PlayerGUIDFieldNumber = 1;
    private int playerGUID_;
    /// <summary>
    ///玩家GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGUID {
      get { return playerGUID_; }
      set {
        playerGUID_ = value;
      }
    }

    /// <summary>Field number for the "chairID" field.</summary>
    public const int ChairIDFieldNumber = 2;
    private int chairID_;
    /// <summary>
    ///要出牌玩家的椅子ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairID {
      get { return chairID_; }
      set {
        chairID_ = value;
      }
    }

    /// <summary>Field number for the "activePosInfo" field.</summary>
    public const int ActivePosInfoFieldNumber = 3;
    private string activePosInfo_ = "";
    /// <summary>
    ///可以选择的位置信息串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActivePosInfo {
      get { return activePosInfo_; }
      set {
        activePosInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnToNextPlayerReceive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnToNextPlayerReceive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerGUID != other.PlayerGUID) return false;
      if (ChairID != other.ChairID) return false;
      if (ActivePosInfo != other.ActivePosInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerGUID != 0) hash ^= PlayerGUID.GetHashCode();
      if (ChairID != 0) hash ^= ChairID.GetHashCode();
      if (ActivePosInfo.Length != 0) hash ^= ActivePosInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (ChairID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairID);
      }
      if (ActivePosInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ActivePosInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (ChairID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairID);
      }
      if (ActivePosInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ActivePosInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerGUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGUID);
      }
      if (ChairID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairID);
      }
      if (ActivePosInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivePosInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnToNextPlayerReceive other) {
      if (other == null) {
        return;
      }
      if (other.PlayerGUID != 0) {
        PlayerGUID = other.PlayerGUID;
      }
      if (other.ChairID != 0) {
        ChairID = other.ChairID;
      }
      if (other.ActivePosInfo.Length != 0) {
        ActivePosInfo = other.ActivePosInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            ChairID = input.ReadInt32();
            break;
          }
          case 26: {
            ActivePosInfo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            ChairID = input.ReadInt32();
            break;
          }
          case 26: {
            ActivePosInfo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///放下一个棋子的请求
  /// </summary>
  public sealed partial class PutDownPieceRequest : pb::IMessage<PutDownPieceRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PutDownPieceRequest> _parser = new pb::MessageParser<PutDownPieceRequest>(() => new PutDownPieceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutDownPieceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.OthelloGame.MsgOthelloGameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownPieceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownPieceRequest(PutDownPieceRequest other) : this() {
      playerGUID_ = other.playerGUID_;
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownPieceRequest Clone() {
      return new PutDownPieceRequest(this);
    }

    /// <summary>Field number for the "playerGUID" field.</summary>
    public const int PlayerGUIDFieldNumber = 1;
    private int playerGUID_;
    /// <summary>
    ///放下棋子的玩家GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGUID {
      get { return playerGUID_; }
      set {
        playerGUID_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private int x_;
    /// <summary>
    ///放下棋子位置的x坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private int y_;
    /// <summary>
    ///放下棋子位置的y坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutDownPieceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutDownPieceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerGUID != other.PlayerGUID) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerGUID != 0) hash ^= PlayerGUID.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (X != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (X != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerGUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGUID);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutDownPieceRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerGUID != 0) {
        PlayerGUID = other.PlayerGUID;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            X = input.ReadInt32();
            break;
          }
          case 24: {
            Y = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///放下一个棋子的响应
  /// </summary>
  public sealed partial class PutDownPieceReceive : pb::IMessage<PutDownPieceReceive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PutDownPieceReceive> _parser = new pb::MessageParser<PutDownPieceReceive>(() => new PutDownPieceReceive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutDownPieceReceive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.OthelloGame.MsgOthelloGameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownPieceReceive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownPieceReceive(PutDownPieceReceive other) : this() {
      playerGUID_ = other.playerGUID_;
      state_ = other.state_;
      x_ = other.x_;
      y_ = other.y_;
      color_ = other.color_;
      translatePiecesInfo_ = other.translatePiecesInfo_;
      blackPieceCount_ = other.blackPieceCount_;
      whitePieceCount_ = other.whitePieceCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutDownPieceReceive Clone() {
      return new PutDownPieceReceive(this);
    }

    /// <summary>Field number for the "playerGUID" field.</summary>
    public const int PlayerGUIDFieldNumber = 1;
    private int playerGUID_;
    /// <summary>
    ///放下棋子的玩家GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGUID {
      get { return playerGUID_; }
      set {
        playerGUID_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private int state_;
    /// <summary>
    ///放下棋子的结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private int x_;
    /// <summary>
    ///放下棋子位置的x坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private int y_;
    /// <summary>
    ///放下棋子位置的y坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private int color_;
    /// <summary>
    ///放下棋子的颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "translatePiecesInfo" field.</summary>
    public const int TranslatePiecesInfoFieldNumber = 6;
    private string translatePiecesInfo_ = "";
    /// <summary>
    ///需要翻转的棋子信息串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TranslatePiecesInfo {
      get { return translatePiecesInfo_; }
      set {
        translatePiecesInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "blackPieceCount" field.</summary>
    public const int BlackPieceCountFieldNumber = 7;
    private int blackPieceCount_;
    /// <summary>
    ///当前黑色棋子的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlackPieceCount {
      get { return blackPieceCount_; }
      set {
        blackPieceCount_ = value;
      }
    }

    /// <summary>Field number for the "whitePieceCount" field.</summary>
    public const int WhitePieceCountFieldNumber = 8;
    private int whitePieceCount_;
    /// <summary>
    ///当前白色棋子的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WhitePieceCount {
      get { return whitePieceCount_; }
      set {
        whitePieceCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutDownPieceReceive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutDownPieceReceive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerGUID != other.PlayerGUID) return false;
      if (State != other.State) return false;
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (Color != other.Color) return false;
      if (TranslatePiecesInfo != other.TranslatePiecesInfo) return false;
      if (BlackPieceCount != other.BlackPieceCount) return false;
      if (WhitePieceCount != other.WhitePieceCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerGUID != 0) hash ^= PlayerGUID.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (Color != 0) hash ^= Color.GetHashCode();
      if (TranslatePiecesInfo.Length != 0) hash ^= TranslatePiecesInfo.GetHashCode();
      if (BlackPieceCount != 0) hash ^= BlackPieceCount.GetHashCode();
      if (WhitePieceCount != 0) hash ^= WhitePieceCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (X != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (Color != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Color);
      }
      if (TranslatePiecesInfo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TranslatePiecesInfo);
      }
      if (BlackPieceCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BlackPieceCount);
      }
      if (WhitePieceCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WhitePieceCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(State);
      }
      if (X != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Y);
      }
      if (Color != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Color);
      }
      if (TranslatePiecesInfo.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(TranslatePiecesInfo);
      }
      if (BlackPieceCount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BlackPieceCount);
      }
      if (WhitePieceCount != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(WhitePieceCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerGUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGUID);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Color);
      }
      if (TranslatePiecesInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TranslatePiecesInfo);
      }
      if (BlackPieceCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlackPieceCount);
      }
      if (WhitePieceCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WhitePieceCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutDownPieceReceive other) {
      if (other == null) {
        return;
      }
      if (other.PlayerGUID != 0) {
        PlayerGUID = other.PlayerGUID;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      if (other.TranslatePiecesInfo.Length != 0) {
        TranslatePiecesInfo = other.TranslatePiecesInfo;
      }
      if (other.BlackPieceCount != 0) {
        BlackPieceCount = other.BlackPieceCount;
      }
      if (other.WhitePieceCount != 0) {
        WhitePieceCount = other.WhitePieceCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Color = input.ReadInt32();
            break;
          }
          case 50: {
            TranslatePiecesInfo = input.ReadString();
            break;
          }
          case 56: {
            BlackPieceCount = input.ReadInt32();
            break;
          }
          case 64: {
            WhitePieceCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            State = input.ReadInt32();
            break;
          }
          case 24: {
            X = input.ReadInt32();
            break;
          }
          case 32: {
            Y = input.ReadInt32();
            break;
          }
          case 40: {
            Color = input.ReadInt32();
            break;
          }
          case 50: {
            TranslatePiecesInfo = input.ReadString();
            break;
          }
          case 56: {
            BlackPieceCount = input.ReadInt32();
            break;
          }
          case 64: {
            WhitePieceCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///断线重连请求
  /// </summary>
  public sealed partial class ReconnectionRequest : pb::IMessage<ReconnectionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReconnectionRequest> _parser = new pb::MessageParser<ReconnectionRequest>(() => new ReconnectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReconnectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.OthelloGame.MsgOthelloGameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionRequest(ReconnectionRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionRequest Clone() {
      return new ReconnectionRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReconnectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReconnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReconnectionRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///断线重连响应
  /// </summary>
  public sealed partial class ReconnectionReceive : pb::IMessage<ReconnectionReceive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReconnectionReceive> _parser = new pb::MessageParser<ReconnectionReceive>(() => new ReconnectionReceive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReconnectionReceive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.OthelloGame.MsgOthelloGameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionReceive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionReceive(ReconnectionReceive other) : this() {
      playerGUID_ = other.playerGUID_;
      playerChairID_ = other.playerChairID_;
      playerAmount_ = other.playerAmount_;
      roomName_ = other.roomName_;
      roomID_ = other.roomID_;
      outCardCountdown_ = other.outCardCountdown_;
      playerNameList_ = other.playerNameList_.Clone();
      playerScoreList_ = other.playerScoreList_.Clone();
      playerAvatarList_ = other.playerAvatarList_.Clone();
      piecesInfoString_ = other.piecesInfoString_;
      activeChairID_ = other.activeChairID_;
      activePosInfo_ = other.activePosInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionReceive Clone() {
      return new ReconnectionReceive(this);
    }

    /// <summary>Field number for the "playerGUID" field.</summary>
    public const int PlayerGUIDFieldNumber = 1;
    private int playerGUID_;
    /// <summary>
    ///玩家GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGUID {
      get { return playerGUID_; }
      set {
        playerGUID_ = value;
      }
    }

    /// <summary>Field number for the "playerChairID" field.</summary>
    public const int PlayerChairIDFieldNumber = 2;
    private int playerChairID_;
    /// <summary>
    ///玩家座位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerChairID {
      get { return playerChairID_; }
      set {
        playerChairID_ = value;
      }
    }

    /// <summary>Field number for the "playerAmount" field.</summary>
    public const int PlayerAmountFieldNumber = 3;
    private int playerAmount_;
    /// <summary>
    ///当前房间内的玩家数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerAmount {
      get { return playerAmount_; }
      set {
        playerAmount_ = value;
      }
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 4;
    private string roomName_ = "";
    /// <summary>
    ///房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 5;
    private string roomID_ = "";
    /// <summary>
    ///房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomID {
      get { return roomID_; }
      set {
        roomID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "outCardCountdown" field.</summary>
    public const int OutCardCountdownFieldNumber = 6;
    private int outCardCountdown_;
    /// <summary>
    ///出牌倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutCardCountdown {
      get { return outCardCountdown_; }
      set {
        outCardCountdown_ = value;
      }
    }

    /// <summary>Field number for the "playerNameList" field.</summary>
    public const int PlayerNameListFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_playerNameList_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> playerNameList_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///当前房间内的玩家名称列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayerNameList {
      get { return playerNameList_; }
    }

    /// <summary>Field number for the "playerScoreList" field.</summary>
    public const int PlayerScoreListFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_playerScoreList_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> playerScoreList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///当前房间内的玩家积分列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerScoreList {
      get { return playerScoreList_; }
    }

    /// <summary>Field number for the "playerAvatarList" field.</summary>
    public const int PlayerAvatarListFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_playerAvatarList_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> playerAvatarList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///当前房间内的玩家头像图片名称列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerAvatarList {
      get { return playerAvatarList_; }
    }

    /// <summary>Field number for the "piecesInfoString" field.</summary>
    public const int PiecesInfoStringFieldNumber = 10;
    private string piecesInfoString_ = "";
    /// <summary>
    ///棋盘棋子的信息串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PiecesInfoString {
      get { return piecesInfoString_; }
      set {
        piecesInfoString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "activeChairID" field.</summary>
    public const int ActiveChairIDFieldNumber = 11;
    private int activeChairID_;
    /// <summary>
    ///要出牌玩家的椅子ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveChairID {
      get { return activeChairID_; }
      set {
        activeChairID_ = value;
      }
    }

    /// <summary>Field number for the "activePosInfo" field.</summary>
    public const int ActivePosInfoFieldNumber = 12;
    private string activePosInfo_ = "";
    /// <summary>
    ///可以选择的位置信息串
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActivePosInfo {
      get { return activePosInfo_; }
      set {
        activePosInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReconnectionReceive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReconnectionReceive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerGUID != other.PlayerGUID) return false;
      if (PlayerChairID != other.PlayerChairID) return false;
      if (PlayerAmount != other.PlayerAmount) return false;
      if (RoomName != other.RoomName) return false;
      if (RoomID != other.RoomID) return false;
      if (OutCardCountdown != other.OutCardCountdown) return false;
      if(!playerNameList_.Equals(other.playerNameList_)) return false;
      if(!playerScoreList_.Equals(other.playerScoreList_)) return false;
      if(!playerAvatarList_.Equals(other.playerAvatarList_)) return false;
      if (PiecesInfoString != other.PiecesInfoString) return false;
      if (ActiveChairID != other.ActiveChairID) return false;
      if (ActivePosInfo != other.ActivePosInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerGUID != 0) hash ^= PlayerGUID.GetHashCode();
      if (PlayerChairID != 0) hash ^= PlayerChairID.GetHashCode();
      if (PlayerAmount != 0) hash ^= PlayerAmount.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (RoomID.Length != 0) hash ^= RoomID.GetHashCode();
      if (OutCardCountdown != 0) hash ^= OutCardCountdown.GetHashCode();
      hash ^= playerNameList_.GetHashCode();
      hash ^= playerScoreList_.GetHashCode();
      hash ^= playerAvatarList_.GetHashCode();
      if (PiecesInfoString.Length != 0) hash ^= PiecesInfoString.GetHashCode();
      if (ActiveChairID != 0) hash ^= ActiveChairID.GetHashCode();
      if (ActivePosInfo.Length != 0) hash ^= ActivePosInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (PlayerChairID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerChairID);
      }
      if (PlayerAmount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerAmount);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomName);
      }
      if (RoomID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RoomID);
      }
      if (OutCardCountdown != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OutCardCountdown);
      }
      playerNameList_.WriteTo(output, _repeated_playerNameList_codec);
      playerScoreList_.WriteTo(output, _repeated_playerScoreList_codec);
      playerAvatarList_.WriteTo(output, _repeated_playerAvatarList_codec);
      if (PiecesInfoString.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PiecesInfoString);
      }
      if (ActiveChairID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ActiveChairID);
      }
      if (ActivePosInfo.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ActivePosInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (PlayerChairID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerChairID);
      }
      if (PlayerAmount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerAmount);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomName);
      }
      if (RoomID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RoomID);
      }
      if (OutCardCountdown != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OutCardCountdown);
      }
      playerNameList_.WriteTo(ref output, _repeated_playerNameList_codec);
      playerScoreList_.WriteTo(ref output, _repeated_playerScoreList_codec);
      playerAvatarList_.WriteTo(ref output, _repeated_playerAvatarList_codec);
      if (PiecesInfoString.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PiecesInfoString);
      }
      if (ActiveChairID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ActiveChairID);
      }
      if (ActivePosInfo.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ActivePosInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerGUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGUID);
      }
      if (PlayerChairID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerChairID);
      }
      if (PlayerAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerAmount);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (RoomID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomID);
      }
      if (OutCardCountdown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutCardCountdown);
      }
      size += playerNameList_.CalculateSize(_repeated_playerNameList_codec);
      size += playerScoreList_.CalculateSize(_repeated_playerScoreList_codec);
      size += playerAvatarList_.CalculateSize(_repeated_playerAvatarList_codec);
      if (PiecesInfoString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PiecesInfoString);
      }
      if (ActiveChairID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveChairID);
      }
      if (ActivePosInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivePosInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReconnectionReceive other) {
      if (other == null) {
        return;
      }
      if (other.PlayerGUID != 0) {
        PlayerGUID = other.PlayerGUID;
      }
      if (other.PlayerChairID != 0) {
        PlayerChairID = other.PlayerChairID;
      }
      if (other.PlayerAmount != 0) {
        PlayerAmount = other.PlayerAmount;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.RoomID.Length != 0) {
        RoomID = other.RoomID;
      }
      if (other.OutCardCountdown != 0) {
        OutCardCountdown = other.OutCardCountdown;
      }
      playerNameList_.Add(other.playerNameList_);
      playerScoreList_.Add(other.playerScoreList_);
      playerAvatarList_.Add(other.playerAvatarList_);
      if (other.PiecesInfoString.Length != 0) {
        PiecesInfoString = other.PiecesInfoString;
      }
      if (other.ActiveChairID != 0) {
        ActiveChairID = other.ActiveChairID;
      }
      if (other.ActivePosInfo.Length != 0) {
        ActivePosInfo = other.ActivePosInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerChairID = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerAmount = input.ReadInt32();
            break;
          }
          case 34: {
            RoomName = input.ReadString();
            break;
          }
          case 42: {
            RoomID = input.ReadString();
            break;
          }
          case 48: {
            OutCardCountdown = input.ReadInt32();
            break;
          }
          case 58: {
            playerNameList_.AddEntriesFrom(input, _repeated_playerNameList_codec);
            break;
          }
          case 66:
          case 64: {
            playerScoreList_.AddEntriesFrom(input, _repeated_playerScoreList_codec);
            break;
          }
          case 74:
          case 72: {
            playerAvatarList_.AddEntriesFrom(input, _repeated_playerAvatarList_codec);
            break;
          }
          case 82: {
            PiecesInfoString = input.ReadString();
            break;
          }
          case 88: {
            ActiveChairID = input.ReadInt32();
            break;
          }
          case 98: {
            ActivePosInfo = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerChairID = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerAmount = input.ReadInt32();
            break;
          }
          case 34: {
            RoomName = input.ReadString();
            break;
          }
          case 42: {
            RoomID = input.ReadString();
            break;
          }
          case 48: {
            OutCardCountdown = input.ReadInt32();
            break;
          }
          case 58: {
            playerNameList_.AddEntriesFrom(ref input, _repeated_playerNameList_codec);
            break;
          }
          case 66:
          case 64: {
            playerScoreList_.AddEntriesFrom(ref input, _repeated_playerScoreList_codec);
            break;
          }
          case 74:
          case 72: {
            playerAvatarList_.AddEntriesFrom(ref input, _repeated_playerAvatarList_codec);
            break;
          }
          case 82: {
            PiecesInfoString = input.ReadString();
            break;
          }
          case 88: {
            ActiveChairID = input.ReadInt32();
            break;
          }
          case 98: {
            ActivePosInfo = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
