// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/MsgUNOGame.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace QiLieGuaner.UNOGame {

  /// <summary>Holder for reflection information generated from Proto/MsgUNOGame.proto</summary>
  public static partial class MsgUNOGameReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/MsgUNOGame.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgUNOGameReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZQcm90by9Nc2dVTk9HYW1lLnByb3RvEhNRaUxpZUd1YW5lci5VTk9HYW1l",
            "IiUKD1NlbmRDYXJkUmVxdWVzdBISCgpwbGF5ZXJHVUlEGAEgASgFIjYKD1Nl",
            "bmRDYXJkUmVjZWl2ZRIQCghjYXJkVHlwZRgBIAEoBRIRCgljYXJkQ29sb3IY",
            "AiABKAUiSQoOUHV0Q2FyZFJlcXVlc3QSEgoKcGxheWVyR1VJRBgBIAEoBRIQ",
            "CghjYXJkVHlwZRgCIAEoBRIRCgljYXJkQ29sb3IYAyABKAUiWAoOUHV0Q2Fy",
            "ZFJlY2VpdmUSDQoFc3RhdGUYASABKAUSEgoKcGxheWVyR1VJRBgCIAEoBRIQ",
            "CghjYXJkVHlwZRgDIAEoBRIRCgljYXJkQ29sb3IYBCABKAUiMAoaVHVyblRv",
            "UHV0Q2FyZFBsYXllclJlcXVlc3QSEgoKcGxheWVyR1VJRBgBIAEoBSL5Agoa",
            "VHVyblRvUHV0Q2FyZFBsYXllclJlY2VpdmUSEgoKcGxheWVyR1VJRBgBIAEo",
            "BRIPCgdjaGFpcklEGAIgASgFEhAKCGNhcmRUeXBlGAMgASgFEhEKCWNhcmRD",
            "b2xvchgEIAEoBRIbChNleGVjdXRlRnVuY3Rpb25DYXJkGAUgASgIEh4KFnBy",
            "ZXZpb3VzT3V0Q2FyZENoYWlySUQYBiABKAUSHgoWcHJldmlvdXNIYW5kQ2Fy",
            "ZEFtb3VudBgHIAEoBRIWCg5pc0FkZEd1aWRlQ2FyZBgIIAEoCBIVCg1jYXJk",
            "SGVhcENvdW50GAkgASgFElMKEE91dENhcmREaXJlY3Rpb24YCiABKA4yOS5R",
            "aUxpZUd1YW5lci5VTk9HYW1lLlR1cm5Ub1B1dENhcmRQbGF5ZXJSZWNlaXZl",
            "LkRpcmVjdGlvbiIwCglEaXJlY3Rpb24SDQoJQ2xvY2t3aXNlEAASFAoQQ291",
            "bnRlcmNsb2Nrd2lzZRABIhQKElNwZWNpYWxDYXJkUmVxdWVzdCJQChJTcGVj",
            "aWFsQ2FyZFJlY2VpdmUSEAoIY2FyZFR5cGUYASABKAUSEQoJY2FyZENvbG9y",
            "GAIgASgFEhUKDWdldENhcmRBbW91bnQYAyABKAUiFQoTUmVjb25uZWN0aW9u",
            "UmVxdWVzdCK3AgoTUmVjb25uZWN0aW9uUmVjZWl2ZRISCgpwbGF5ZXJHVUlE",
            "GAEgASgFEhUKDXBsYXllckNoYWlySUQYAiABKAUSFAoMcGxheWVyQW1vdW50",
            "GAMgASgFEhAKCHJvb21OYW1lGAQgASgJEg4KBnJvb21JRBgFIAEoCRIYChBv",
            "dXRDYXJkQ291bnRkb3duGAYgASgFEhYKDnBsYXllck5hbWVMaXN0GAcgAygJ",
            "EhcKD3BsYXllclNjb3JlTGlzdBgIIAMoBRIYChBwbGF5ZXJBdmF0YXJMaXN0",
            "GAkgAygFEh8KF3BsYXllckhhbmRDYXJkQ291bnRMaXN0GAogAygFEhoKEm15",
            "SGFuZENhcmRUeXBlTGlzdBgLIAMoBRIbChNteUhhbmRDYXJkQ29sb3JMaXN0",
            "GAwgAygFIhoKGE1lc3NVcERpc2NhcmRIZWFwUmVxdWVzdCIoChhNZXNzVXBE",
            "aXNjYXJkSGVhcFJlY2VpdmUSDAoEdGltZRgBIAEoA2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.SendCardRequest), global::QiLieGuaner.UNOGame.SendCardRequest.Parser, new[]{ "PlayerGUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.SendCardReceive), global::QiLieGuaner.UNOGame.SendCardReceive.Parser, new[]{ "CardType", "CardColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.PutCardRequest), global::QiLieGuaner.UNOGame.PutCardRequest.Parser, new[]{ "PlayerGUID", "CardType", "CardColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.PutCardReceive), global::QiLieGuaner.UNOGame.PutCardReceive.Parser, new[]{ "State", "PlayerGUID", "CardType", "CardColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.TurnToPutCardPlayerRequest), global::QiLieGuaner.UNOGame.TurnToPutCardPlayerRequest.Parser, new[]{ "PlayerGUID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive), global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Parser, new[]{ "PlayerGUID", "ChairID", "CardType", "CardColor", "ExecuteFunctionCard", "PreviousOutCardChairID", "PreviousHandCardAmount", "IsAddGuideCard", "CardHeapCount", "OutCardDirection" }, null, new[]{ typeof(global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Types.Direction) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.SpecialCardRequest), global::QiLieGuaner.UNOGame.SpecialCardRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.SpecialCardReceive), global::QiLieGuaner.UNOGame.SpecialCardReceive.Parser, new[]{ "CardType", "CardColor", "GetCardAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.ReconnectionRequest), global::QiLieGuaner.UNOGame.ReconnectionRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.ReconnectionReceive), global::QiLieGuaner.UNOGame.ReconnectionReceive.Parser, new[]{ "PlayerGUID", "PlayerChairID", "PlayerAmount", "RoomName", "RoomID", "OutCardCountdown", "PlayerNameList", "PlayerScoreList", "PlayerAvatarList", "PlayerHandCardCountList", "MyHandCardTypeList", "MyHandCardColorList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.MessUpDiscardHeapRequest), global::QiLieGuaner.UNOGame.MessUpDiscardHeapRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::QiLieGuaner.UNOGame.MessUpDiscardHeapReceive), global::QiLieGuaner.UNOGame.MessUpDiscardHeapReceive.Parser, new[]{ "Time" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///发牌请求
  /// </summary>
  public sealed partial class SendCardRequest : pb::IMessage<SendCardRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendCardRequest> _parser = new pb::MessageParser<SendCardRequest>(() => new SendCardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendCardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCardRequest(SendCardRequest other) : this() {
      playerGUID_ = other.playerGUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCardRequest Clone() {
      return new SendCardRequest(this);
    }

    /// <summary>Field number for the "playerGUID" field.</summary>
    public const int PlayerGUIDFieldNumber = 1;
    private int playerGUID_;
    /// <summary>
    ///玩家GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGUID {
      get { return playerGUID_; }
      set {
        playerGUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendCardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendCardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerGUID != other.PlayerGUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerGUID != 0) hash ^= PlayerGUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerGUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendCardRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerGUID != 0) {
        PlayerGUID = other.PlayerGUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///发牌响应
  /// </summary>
  public sealed partial class SendCardReceive : pb::IMessage<SendCardReceive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SendCardReceive> _parser = new pb::MessageParser<SendCardReceive>(() => new SendCardReceive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendCardReceive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCardReceive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCardReceive(SendCardReceive other) : this() {
      cardType_ = other.cardType_;
      cardColor_ = other.cardColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCardReceive Clone() {
      return new SendCardReceive(this);
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 1;
    private int cardType_;
    /// <summary>
    ///牌的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "cardColor" field.</summary>
    public const int CardColorFieldNumber = 2;
    private int cardColor_;
    /// <summary>
    ///牌的颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardColor {
      get { return cardColor_; }
      set {
        cardColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendCardReceive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendCardReceive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardType != other.CardType) return false;
      if (CardColor != other.CardColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (CardColor != 0) hash ^= CardColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CardType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardType);
      }
      if (CardColor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CardType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardType);
      }
      if (CardColor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (CardColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendCardReceive other) {
      if (other == null) {
        return;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      if (other.CardColor != 0) {
        CardColor = other.CardColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardType = input.ReadInt32();
            break;
          }
          case 16: {
            CardColor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CardType = input.ReadInt32();
            break;
          }
          case 16: {
            CardColor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///出牌请求
  /// </summary>
  public sealed partial class PutCardRequest : pb::IMessage<PutCardRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PutCardRequest> _parser = new pb::MessageParser<PutCardRequest>(() => new PutCardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutCardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutCardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutCardRequest(PutCardRequest other) : this() {
      playerGUID_ = other.playerGUID_;
      cardType_ = other.cardType_;
      cardColor_ = other.cardColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutCardRequest Clone() {
      return new PutCardRequest(this);
    }

    /// <summary>Field number for the "playerGUID" field.</summary>
    public const int PlayerGUIDFieldNumber = 1;
    private int playerGUID_;
    /// <summary>
    ///玩家GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGUID {
      get { return playerGUID_; }
      set {
        playerGUID_ = value;
      }
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 2;
    private int cardType_;
    /// <summary>
    ///牌的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "cardColor" field.</summary>
    public const int CardColorFieldNumber = 3;
    private int cardColor_;
    /// <summary>
    ///牌的颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardColor {
      get { return cardColor_; }
      set {
        cardColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutCardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutCardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerGUID != other.PlayerGUID) return false;
      if (CardType != other.CardType) return false;
      if (CardColor != other.CardColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerGUID != 0) hash ^= PlayerGUID.GetHashCode();
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (CardColor != 0) hash ^= CardColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (CardType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (CardColor != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (CardType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardType);
      }
      if (CardColor != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerGUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGUID);
      }
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (CardColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutCardRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerGUID != 0) {
        PlayerGUID = other.PlayerGUID;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      if (other.CardColor != 0) {
        CardColor = other.CardColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            CardColor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            CardType = input.ReadInt32();
            break;
          }
          case 24: {
            CardColor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///出牌响应
  /// </summary>
  public sealed partial class PutCardReceive : pb::IMessage<PutCardReceive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PutCardReceive> _parser = new pb::MessageParser<PutCardReceive>(() => new PutCardReceive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PutCardReceive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutCardReceive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutCardReceive(PutCardReceive other) : this() {
      state_ = other.state_;
      playerGUID_ = other.playerGUID_;
      cardType_ = other.cardType_;
      cardColor_ = other.cardColor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PutCardReceive Clone() {
      return new PutCardReceive(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private int state_;
    /// <summary>
    ///出牌结果
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "playerGUID" field.</summary>
    public const int PlayerGUIDFieldNumber = 2;
    private int playerGUID_;
    /// <summary>
    ///玩家GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGUID {
      get { return playerGUID_; }
      set {
        playerGUID_ = value;
      }
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 3;
    private int cardType_;
    /// <summary>
    ///牌的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "cardColor" field.</summary>
    public const int CardColorFieldNumber = 4;
    private int cardColor_;
    /// <summary>
    ///牌的颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardColor {
      get { return cardColor_; }
      set {
        cardColor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PutCardReceive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PutCardReceive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (PlayerGUID != other.PlayerGUID) return false;
      if (CardType != other.CardType) return false;
      if (CardColor != other.CardColor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      if (PlayerGUID != 0) hash ^= PlayerGUID.GetHashCode();
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (CardColor != 0) hash ^= CardColor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (PlayerGUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerGUID);
      }
      if (CardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardType);
      }
      if (CardColor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CardColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(State);
      }
      if (PlayerGUID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerGUID);
      }
      if (CardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardType);
      }
      if (CardColor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CardColor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (PlayerGUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGUID);
      }
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (CardColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardColor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PutCardReceive other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.PlayerGUID != 0) {
        PlayerGUID = other.PlayerGUID;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      if (other.CardColor != 0) {
        CardColor = other.CardColor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 24: {
            CardType = input.ReadInt32();
            break;
          }
          case 32: {
            CardColor = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 24: {
            CardType = input.ReadInt32();
            break;
          }
          case 32: {
            CardColor = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///轮到下一个玩家出牌的请求
  /// </summary>
  public sealed partial class TurnToPutCardPlayerRequest : pb::IMessage<TurnToPutCardPlayerRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TurnToPutCardPlayerRequest> _parser = new pb::MessageParser<TurnToPutCardPlayerRequest>(() => new TurnToPutCardPlayerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnToPutCardPlayerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToPutCardPlayerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToPutCardPlayerRequest(TurnToPutCardPlayerRequest other) : this() {
      playerGUID_ = other.playerGUID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToPutCardPlayerRequest Clone() {
      return new TurnToPutCardPlayerRequest(this);
    }

    /// <summary>Field number for the "playerGUID" field.</summary>
    public const int PlayerGUIDFieldNumber = 1;
    private int playerGUID_;
    /// <summary>
    ///玩家GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGUID {
      get { return playerGUID_; }
      set {
        playerGUID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnToPutCardPlayerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnToPutCardPlayerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerGUID != other.PlayerGUID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerGUID != 0) hash ^= PlayerGUID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerGUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGUID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnToPutCardPlayerRequest other) {
      if (other == null) {
        return;
      }
      if (other.PlayerGUID != 0) {
        PlayerGUID = other.PlayerGUID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///轮到下一个玩家出牌的响应
  /// </summary>
  public sealed partial class TurnToPutCardPlayerReceive : pb::IMessage<TurnToPutCardPlayerReceive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TurnToPutCardPlayerReceive> _parser = new pb::MessageParser<TurnToPutCardPlayerReceive>(() => new TurnToPutCardPlayerReceive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnToPutCardPlayerReceive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToPutCardPlayerReceive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToPutCardPlayerReceive(TurnToPutCardPlayerReceive other) : this() {
      playerGUID_ = other.playerGUID_;
      chairID_ = other.chairID_;
      cardType_ = other.cardType_;
      cardColor_ = other.cardColor_;
      executeFunctionCard_ = other.executeFunctionCard_;
      previousOutCardChairID_ = other.previousOutCardChairID_;
      previousHandCardAmount_ = other.previousHandCardAmount_;
      isAddGuideCard_ = other.isAddGuideCard_;
      cardHeapCount_ = other.cardHeapCount_;
      outCardDirection_ = other.outCardDirection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnToPutCardPlayerReceive Clone() {
      return new TurnToPutCardPlayerReceive(this);
    }

    /// <summary>Field number for the "playerGUID" field.</summary>
    public const int PlayerGUIDFieldNumber = 1;
    private int playerGUID_;
    /// <summary>
    ///玩家GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGUID {
      get { return playerGUID_; }
      set {
        playerGUID_ = value;
      }
    }

    /// <summary>Field number for the "chairID" field.</summary>
    public const int ChairIDFieldNumber = 2;
    private int chairID_;
    /// <summary>
    ///要出牌玩家的椅子ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChairID {
      get { return chairID_; }
      set {
        chairID_ = value;
      }
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 3;
    private int cardType_;
    /// <summary>
    ///牌的类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "cardColor" field.</summary>
    public const int CardColorFieldNumber = 4;
    private int cardColor_;
    /// <summary>
    ///牌的颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardColor {
      get { return cardColor_; }
      set {
        cardColor_ = value;
      }
    }

    /// <summary>Field number for the "executeFunctionCard" field.</summary>
    public const int ExecuteFunctionCardFieldNumber = 5;
    private bool executeFunctionCard_;
    /// <summary>
    ///如果指示牌为功能牌，则客户端是否需要执行功能牌的功能，如果不执行功能则只判断颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExecuteFunctionCard {
      get { return executeFunctionCard_; }
      set {
        executeFunctionCard_ = value;
      }
    }

    /// <summary>Field number for the "previousOutCardChairID" field.</summary>
    public const int PreviousOutCardChairIDFieldNumber = 6;
    private int previousOutCardChairID_;
    /// <summary>
    ///上一个出牌的玩家的座位ID。游戏开始时为-1，即没有上一个玩家
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PreviousOutCardChairID {
      get { return previousOutCardChairID_; }
      set {
        previousOutCardChairID_ = value;
      }
    }

    /// <summary>Field number for the "previousHandCardAmount" field.</summary>
    public const int PreviousHandCardAmountFieldNumber = 7;
    private int previousHandCardAmount_;
    /// <summary>
    ///上一个出牌的玩家的手牌数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PreviousHandCardAmount {
      get { return previousHandCardAmount_; }
      set {
        previousHandCardAmount_ = value;
      }
    }

    /// <summary>Field number for the "isAddGuideCard" field.</summary>
    public const int IsAddGuideCardFieldNumber = 8;
    private bool isAddGuideCard_;
    /// <summary>
    ///客户端中是否增加指引牌（如果摸牌则不加，其他玩家出牌则添加）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAddGuideCard {
      get { return isAddGuideCard_; }
      set {
        isAddGuideCard_ = value;
      }
    }

    /// <summary>Field number for the "cardHeapCount" field.</summary>
    public const int CardHeapCountFieldNumber = 9;
    private int cardHeapCount_;
    /// <summary>
    ///当前牌堆还有多少牌
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardHeapCount {
      get { return cardHeapCount_; }
      set {
        cardHeapCount_ = value;
      }
    }

    /// <summary>Field number for the "OutCardDirection" field.</summary>
    public const int OutCardDirectionFieldNumber = 10;
    private global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Types.Direction outCardDirection_ = global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Types.Direction.Clockwise;
    /// <summary>
    ///当前出牌方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Types.Direction OutCardDirection {
      get { return outCardDirection_; }
      set {
        outCardDirection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnToPutCardPlayerReceive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnToPutCardPlayerReceive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerGUID != other.PlayerGUID) return false;
      if (ChairID != other.ChairID) return false;
      if (CardType != other.CardType) return false;
      if (CardColor != other.CardColor) return false;
      if (ExecuteFunctionCard != other.ExecuteFunctionCard) return false;
      if (PreviousOutCardChairID != other.PreviousOutCardChairID) return false;
      if (PreviousHandCardAmount != other.PreviousHandCardAmount) return false;
      if (IsAddGuideCard != other.IsAddGuideCard) return false;
      if (CardHeapCount != other.CardHeapCount) return false;
      if (OutCardDirection != other.OutCardDirection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerGUID != 0) hash ^= PlayerGUID.GetHashCode();
      if (ChairID != 0) hash ^= ChairID.GetHashCode();
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (CardColor != 0) hash ^= CardColor.GetHashCode();
      if (ExecuteFunctionCard != false) hash ^= ExecuteFunctionCard.GetHashCode();
      if (PreviousOutCardChairID != 0) hash ^= PreviousOutCardChairID.GetHashCode();
      if (PreviousHandCardAmount != 0) hash ^= PreviousHandCardAmount.GetHashCode();
      if (IsAddGuideCard != false) hash ^= IsAddGuideCard.GetHashCode();
      if (CardHeapCount != 0) hash ^= CardHeapCount.GetHashCode();
      if (OutCardDirection != global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Types.Direction.Clockwise) hash ^= OutCardDirection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (ChairID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairID);
      }
      if (CardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardType);
      }
      if (CardColor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CardColor);
      }
      if (ExecuteFunctionCard != false) {
        output.WriteRawTag(40);
        output.WriteBool(ExecuteFunctionCard);
      }
      if (PreviousOutCardChairID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PreviousOutCardChairID);
      }
      if (PreviousHandCardAmount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PreviousHandCardAmount);
      }
      if (IsAddGuideCard != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsAddGuideCard);
      }
      if (CardHeapCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CardHeapCount);
      }
      if (OutCardDirection != global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Types.Direction.Clockwise) {
        output.WriteRawTag(80);
        output.WriteEnum((int) OutCardDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (ChairID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChairID);
      }
      if (CardType != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CardType);
      }
      if (CardColor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CardColor);
      }
      if (ExecuteFunctionCard != false) {
        output.WriteRawTag(40);
        output.WriteBool(ExecuteFunctionCard);
      }
      if (PreviousOutCardChairID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PreviousOutCardChairID);
      }
      if (PreviousHandCardAmount != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PreviousHandCardAmount);
      }
      if (IsAddGuideCard != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsAddGuideCard);
      }
      if (CardHeapCount != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CardHeapCount);
      }
      if (OutCardDirection != global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Types.Direction.Clockwise) {
        output.WriteRawTag(80);
        output.WriteEnum((int) OutCardDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerGUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGUID);
      }
      if (ChairID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChairID);
      }
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (CardColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardColor);
      }
      if (ExecuteFunctionCard != false) {
        size += 1 + 1;
      }
      if (PreviousOutCardChairID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreviousOutCardChairID);
      }
      if (PreviousHandCardAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreviousHandCardAmount);
      }
      if (IsAddGuideCard != false) {
        size += 1 + 1;
      }
      if (CardHeapCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardHeapCount);
      }
      if (OutCardDirection != global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Types.Direction.Clockwise) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutCardDirection);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnToPutCardPlayerReceive other) {
      if (other == null) {
        return;
      }
      if (other.PlayerGUID != 0) {
        PlayerGUID = other.PlayerGUID;
      }
      if (other.ChairID != 0) {
        ChairID = other.ChairID;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      if (other.CardColor != 0) {
        CardColor = other.CardColor;
      }
      if (other.ExecuteFunctionCard != false) {
        ExecuteFunctionCard = other.ExecuteFunctionCard;
      }
      if (other.PreviousOutCardChairID != 0) {
        PreviousOutCardChairID = other.PreviousOutCardChairID;
      }
      if (other.PreviousHandCardAmount != 0) {
        PreviousHandCardAmount = other.PreviousHandCardAmount;
      }
      if (other.IsAddGuideCard != false) {
        IsAddGuideCard = other.IsAddGuideCard;
      }
      if (other.CardHeapCount != 0) {
        CardHeapCount = other.CardHeapCount;
      }
      if (other.OutCardDirection != global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Types.Direction.Clockwise) {
        OutCardDirection = other.OutCardDirection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            ChairID = input.ReadInt32();
            break;
          }
          case 24: {
            CardType = input.ReadInt32();
            break;
          }
          case 32: {
            CardColor = input.ReadInt32();
            break;
          }
          case 40: {
            ExecuteFunctionCard = input.ReadBool();
            break;
          }
          case 48: {
            PreviousOutCardChairID = input.ReadInt32();
            break;
          }
          case 56: {
            PreviousHandCardAmount = input.ReadInt32();
            break;
          }
          case 64: {
            IsAddGuideCard = input.ReadBool();
            break;
          }
          case 72: {
            CardHeapCount = input.ReadInt32();
            break;
          }
          case 80: {
            OutCardDirection = (global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Types.Direction) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            ChairID = input.ReadInt32();
            break;
          }
          case 24: {
            CardType = input.ReadInt32();
            break;
          }
          case 32: {
            CardColor = input.ReadInt32();
            break;
          }
          case 40: {
            ExecuteFunctionCard = input.ReadBool();
            break;
          }
          case 48: {
            PreviousOutCardChairID = input.ReadInt32();
            break;
          }
          case 56: {
            PreviousHandCardAmount = input.ReadInt32();
            break;
          }
          case 64: {
            IsAddGuideCard = input.ReadBool();
            break;
          }
          case 72: {
            CardHeapCount = input.ReadInt32();
            break;
          }
          case 80: {
            OutCardDirection = (global::QiLieGuaner.UNOGame.TurnToPutCardPlayerReceive.Types.Direction) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TurnToPutCardPlayerReceive message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      ///出牌方向
      /// </summary>
      public enum Direction {
        /// <summary>
        ///顺时针
        /// </summary>
        [pbr::OriginalName("Clockwise")] Clockwise = 0,
        /// <summary>
        ///逆时针
        /// </summary>
        [pbr::OriginalName("Counterclockwise")] Counterclockwise = 1,
      }

    }
    #endregion

  }

  /// <summary>
  ///特殊牌的逻辑请求
  /// </summary>
  public sealed partial class SpecialCardRequest : pb::IMessage<SpecialCardRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpecialCardRequest> _parser = new pb::MessageParser<SpecialCardRequest>(() => new SpecialCardRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecialCardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialCardRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialCardRequest(SpecialCardRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialCardRequest Clone() {
      return new SpecialCardRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecialCardRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecialCardRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecialCardRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///特殊牌的逻辑响应
  /// </summary>
  public sealed partial class SpecialCardReceive : pb::IMessage<SpecialCardReceive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpecialCardReceive> _parser = new pb::MessageParser<SpecialCardReceive>(() => new SpecialCardReceive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpecialCardReceive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialCardReceive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialCardReceive(SpecialCardReceive other) : this() {
      cardType_ = other.cardType_;
      cardColor_ = other.cardColor_;
      getCardAmount_ = other.getCardAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpecialCardReceive Clone() {
      return new SpecialCardReceive(this);
    }

    /// <summary>Field number for the "cardType" field.</summary>
    public const int CardTypeFieldNumber = 1;
    private int cardType_;
    /// <summary>
    ///卡牌类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardType {
      get { return cardType_; }
      set {
        cardType_ = value;
      }
    }

    /// <summary>Field number for the "cardColor" field.</summary>
    public const int CardColorFieldNumber = 2;
    private int cardColor_;
    /// <summary>
    ///卡牌颜色
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CardColor {
      get { return cardColor_; }
      set {
        cardColor_ = value;
      }
    }

    /// <summary>Field number for the "getCardAmount" field.</summary>
    public const int GetCardAmountFieldNumber = 3;
    private int getCardAmount_;
    /// <summary>
    ///需要摸牌的数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GetCardAmount {
      get { return getCardAmount_; }
      set {
        getCardAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpecialCardReceive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpecialCardReceive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CardType != other.CardType) return false;
      if (CardColor != other.CardColor) return false;
      if (GetCardAmount != other.GetCardAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CardType != 0) hash ^= CardType.GetHashCode();
      if (CardColor != 0) hash ^= CardColor.GetHashCode();
      if (GetCardAmount != 0) hash ^= GetCardAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (CardType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardType);
      }
      if (CardColor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardColor);
      }
      if (GetCardAmount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GetCardAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (CardType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CardType);
      }
      if (CardColor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CardColor);
      }
      if (GetCardAmount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GetCardAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CardType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardType);
      }
      if (CardColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CardColor);
      }
      if (GetCardAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GetCardAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpecialCardReceive other) {
      if (other == null) {
        return;
      }
      if (other.CardType != 0) {
        CardType = other.CardType;
      }
      if (other.CardColor != 0) {
        CardColor = other.CardColor;
      }
      if (other.GetCardAmount != 0) {
        GetCardAmount = other.GetCardAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CardType = input.ReadInt32();
            break;
          }
          case 16: {
            CardColor = input.ReadInt32();
            break;
          }
          case 24: {
            GetCardAmount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CardType = input.ReadInt32();
            break;
          }
          case 16: {
            CardColor = input.ReadInt32();
            break;
          }
          case 24: {
            GetCardAmount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///断线重连请求
  /// </summary>
  public sealed partial class ReconnectionRequest : pb::IMessage<ReconnectionRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReconnectionRequest> _parser = new pb::MessageParser<ReconnectionRequest>(() => new ReconnectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReconnectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionRequest(ReconnectionRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionRequest Clone() {
      return new ReconnectionRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReconnectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReconnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReconnectionRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///断线重连响应
  /// </summary>
  public sealed partial class ReconnectionReceive : pb::IMessage<ReconnectionReceive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ReconnectionReceive> _parser = new pb::MessageParser<ReconnectionReceive>(() => new ReconnectionReceive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReconnectionReceive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionReceive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionReceive(ReconnectionReceive other) : this() {
      playerGUID_ = other.playerGUID_;
      playerChairID_ = other.playerChairID_;
      playerAmount_ = other.playerAmount_;
      roomName_ = other.roomName_;
      roomID_ = other.roomID_;
      outCardCountdown_ = other.outCardCountdown_;
      playerNameList_ = other.playerNameList_.Clone();
      playerScoreList_ = other.playerScoreList_.Clone();
      playerAvatarList_ = other.playerAvatarList_.Clone();
      playerHandCardCountList_ = other.playerHandCardCountList_.Clone();
      myHandCardTypeList_ = other.myHandCardTypeList_.Clone();
      myHandCardColorList_ = other.myHandCardColorList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReconnectionReceive Clone() {
      return new ReconnectionReceive(this);
    }

    /// <summary>Field number for the "playerGUID" field.</summary>
    public const int PlayerGUIDFieldNumber = 1;
    private int playerGUID_;
    /// <summary>
    ///玩家GUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerGUID {
      get { return playerGUID_; }
      set {
        playerGUID_ = value;
      }
    }

    /// <summary>Field number for the "playerChairID" field.</summary>
    public const int PlayerChairIDFieldNumber = 2;
    private int playerChairID_;
    /// <summary>
    ///玩家座位ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerChairID {
      get { return playerChairID_; }
      set {
        playerChairID_ = value;
      }
    }

    /// <summary>Field number for the "playerAmount" field.</summary>
    public const int PlayerAmountFieldNumber = 3;
    private int playerAmount_;
    /// <summary>
    ///当前房间内的玩家数量
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PlayerAmount {
      get { return playerAmount_; }
      set {
        playerAmount_ = value;
      }
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 4;
    private string roomName_ = "";
    /// <summary>
    ///房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomID" field.</summary>
    public const int RoomIDFieldNumber = 5;
    private string roomID_ = "";
    /// <summary>
    ///房间ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomID {
      get { return roomID_; }
      set {
        roomID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "outCardCountdown" field.</summary>
    public const int OutCardCountdownFieldNumber = 6;
    private int outCardCountdown_;
    /// <summary>
    ///出牌倒计时
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OutCardCountdown {
      get { return outCardCountdown_; }
      set {
        outCardCountdown_ = value;
      }
    }

    /// <summary>Field number for the "playerNameList" field.</summary>
    public const int PlayerNameListFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_playerNameList_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> playerNameList_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///当前房间内的玩家名称列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayerNameList {
      get { return playerNameList_; }
    }

    /// <summary>Field number for the "playerScoreList" field.</summary>
    public const int PlayerScoreListFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_playerScoreList_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> playerScoreList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///当前房间内的玩家积分列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerScoreList {
      get { return playerScoreList_; }
    }

    /// <summary>Field number for the "playerAvatarList" field.</summary>
    public const int PlayerAvatarListFieldNumber = 9;
    private static readonly pb::FieldCodec<int> _repeated_playerAvatarList_codec
        = pb::FieldCodec.ForInt32(74);
    private readonly pbc::RepeatedField<int> playerAvatarList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///当前房间内的玩家头像图片名称列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerAvatarList {
      get { return playerAvatarList_; }
    }

    /// <summary>Field number for the "playerHandCardCountList" field.</summary>
    public const int PlayerHandCardCountListFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_playerHandCardCountList_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> playerHandCardCountList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///当前房间内的玩家手牌数量，对应数组下表为玩家的座位ID列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PlayerHandCardCountList {
      get { return playerHandCardCountList_; }
    }

    /// <summary>Field number for the "myHandCardTypeList" field.</summary>
    public const int MyHandCardTypeListFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_myHandCardTypeList_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> myHandCardTypeList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///自己手牌类型的列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MyHandCardTypeList {
      get { return myHandCardTypeList_; }
    }

    /// <summary>Field number for the "myHandCardColorList" field.</summary>
    public const int MyHandCardColorListFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_myHandCardColorList_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> myHandCardColorList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///自己卡牌颜色的列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> MyHandCardColorList {
      get { return myHandCardColorList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReconnectionReceive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReconnectionReceive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerGUID != other.PlayerGUID) return false;
      if (PlayerChairID != other.PlayerChairID) return false;
      if (PlayerAmount != other.PlayerAmount) return false;
      if (RoomName != other.RoomName) return false;
      if (RoomID != other.RoomID) return false;
      if (OutCardCountdown != other.OutCardCountdown) return false;
      if(!playerNameList_.Equals(other.playerNameList_)) return false;
      if(!playerScoreList_.Equals(other.playerScoreList_)) return false;
      if(!playerAvatarList_.Equals(other.playerAvatarList_)) return false;
      if(!playerHandCardCountList_.Equals(other.playerHandCardCountList_)) return false;
      if(!myHandCardTypeList_.Equals(other.myHandCardTypeList_)) return false;
      if(!myHandCardColorList_.Equals(other.myHandCardColorList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerGUID != 0) hash ^= PlayerGUID.GetHashCode();
      if (PlayerChairID != 0) hash ^= PlayerChairID.GetHashCode();
      if (PlayerAmount != 0) hash ^= PlayerAmount.GetHashCode();
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (RoomID.Length != 0) hash ^= RoomID.GetHashCode();
      if (OutCardCountdown != 0) hash ^= OutCardCountdown.GetHashCode();
      hash ^= playerNameList_.GetHashCode();
      hash ^= playerScoreList_.GetHashCode();
      hash ^= playerAvatarList_.GetHashCode();
      hash ^= playerHandCardCountList_.GetHashCode();
      hash ^= myHandCardTypeList_.GetHashCode();
      hash ^= myHandCardColorList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (PlayerChairID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerChairID);
      }
      if (PlayerAmount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerAmount);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomName);
      }
      if (RoomID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RoomID);
      }
      if (OutCardCountdown != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OutCardCountdown);
      }
      playerNameList_.WriteTo(output, _repeated_playerNameList_codec);
      playerScoreList_.WriteTo(output, _repeated_playerScoreList_codec);
      playerAvatarList_.WriteTo(output, _repeated_playerAvatarList_codec);
      playerHandCardCountList_.WriteTo(output, _repeated_playerHandCardCountList_codec);
      myHandCardTypeList_.WriteTo(output, _repeated_myHandCardTypeList_codec);
      myHandCardColorList_.WriteTo(output, _repeated_myHandCardColorList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayerGUID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerGUID);
      }
      if (PlayerChairID != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PlayerChairID);
      }
      if (PlayerAmount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PlayerAmount);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomName);
      }
      if (RoomID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RoomID);
      }
      if (OutCardCountdown != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(OutCardCountdown);
      }
      playerNameList_.WriteTo(ref output, _repeated_playerNameList_codec);
      playerScoreList_.WriteTo(ref output, _repeated_playerScoreList_codec);
      playerAvatarList_.WriteTo(ref output, _repeated_playerAvatarList_codec);
      playerHandCardCountList_.WriteTo(ref output, _repeated_playerHandCardCountList_codec);
      myHandCardTypeList_.WriteTo(ref output, _repeated_myHandCardTypeList_codec);
      myHandCardColorList_.WriteTo(ref output, _repeated_myHandCardColorList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerGUID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerGUID);
      }
      if (PlayerChairID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerChairID);
      }
      if (PlayerAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerAmount);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (RoomID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomID);
      }
      if (OutCardCountdown != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutCardCountdown);
      }
      size += playerNameList_.CalculateSize(_repeated_playerNameList_codec);
      size += playerScoreList_.CalculateSize(_repeated_playerScoreList_codec);
      size += playerAvatarList_.CalculateSize(_repeated_playerAvatarList_codec);
      size += playerHandCardCountList_.CalculateSize(_repeated_playerHandCardCountList_codec);
      size += myHandCardTypeList_.CalculateSize(_repeated_myHandCardTypeList_codec);
      size += myHandCardColorList_.CalculateSize(_repeated_myHandCardColorList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReconnectionReceive other) {
      if (other == null) {
        return;
      }
      if (other.PlayerGUID != 0) {
        PlayerGUID = other.PlayerGUID;
      }
      if (other.PlayerChairID != 0) {
        PlayerChairID = other.PlayerChairID;
      }
      if (other.PlayerAmount != 0) {
        PlayerAmount = other.PlayerAmount;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.RoomID.Length != 0) {
        RoomID = other.RoomID;
      }
      if (other.OutCardCountdown != 0) {
        OutCardCountdown = other.OutCardCountdown;
      }
      playerNameList_.Add(other.playerNameList_);
      playerScoreList_.Add(other.playerScoreList_);
      playerAvatarList_.Add(other.playerAvatarList_);
      playerHandCardCountList_.Add(other.playerHandCardCountList_);
      myHandCardTypeList_.Add(other.myHandCardTypeList_);
      myHandCardColorList_.Add(other.myHandCardColorList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerChairID = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerAmount = input.ReadInt32();
            break;
          }
          case 34: {
            RoomName = input.ReadString();
            break;
          }
          case 42: {
            RoomID = input.ReadString();
            break;
          }
          case 48: {
            OutCardCountdown = input.ReadInt32();
            break;
          }
          case 58: {
            playerNameList_.AddEntriesFrom(input, _repeated_playerNameList_codec);
            break;
          }
          case 66:
          case 64: {
            playerScoreList_.AddEntriesFrom(input, _repeated_playerScoreList_codec);
            break;
          }
          case 74:
          case 72: {
            playerAvatarList_.AddEntriesFrom(input, _repeated_playerAvatarList_codec);
            break;
          }
          case 82:
          case 80: {
            playerHandCardCountList_.AddEntriesFrom(input, _repeated_playerHandCardCountList_codec);
            break;
          }
          case 90:
          case 88: {
            myHandCardTypeList_.AddEntriesFrom(input, _repeated_myHandCardTypeList_codec);
            break;
          }
          case 98:
          case 96: {
            myHandCardColorList_.AddEntriesFrom(input, _repeated_myHandCardColorList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayerGUID = input.ReadInt32();
            break;
          }
          case 16: {
            PlayerChairID = input.ReadInt32();
            break;
          }
          case 24: {
            PlayerAmount = input.ReadInt32();
            break;
          }
          case 34: {
            RoomName = input.ReadString();
            break;
          }
          case 42: {
            RoomID = input.ReadString();
            break;
          }
          case 48: {
            OutCardCountdown = input.ReadInt32();
            break;
          }
          case 58: {
            playerNameList_.AddEntriesFrom(ref input, _repeated_playerNameList_codec);
            break;
          }
          case 66:
          case 64: {
            playerScoreList_.AddEntriesFrom(ref input, _repeated_playerScoreList_codec);
            break;
          }
          case 74:
          case 72: {
            playerAvatarList_.AddEntriesFrom(ref input, _repeated_playerAvatarList_codec);
            break;
          }
          case 82:
          case 80: {
            playerHandCardCountList_.AddEntriesFrom(ref input, _repeated_playerHandCardCountList_codec);
            break;
          }
          case 90:
          case 88: {
            myHandCardTypeList_.AddEntriesFrom(ref input, _repeated_myHandCardTypeList_codec);
            break;
          }
          case 98:
          case 96: {
            myHandCardColorList_.AddEntriesFrom(ref input, _repeated_myHandCardColorList_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  ///洗弃牌堆请求
  /// </summary>
  public sealed partial class MessUpDiscardHeapRequest : pb::IMessage<MessUpDiscardHeapRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MessUpDiscardHeapRequest> _parser = new pb::MessageParser<MessUpDiscardHeapRequest>(() => new MessUpDiscardHeapRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessUpDiscardHeapRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessUpDiscardHeapRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessUpDiscardHeapRequest(MessUpDiscardHeapRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessUpDiscardHeapRequest Clone() {
      return new MessUpDiscardHeapRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessUpDiscardHeapRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessUpDiscardHeapRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessUpDiscardHeapRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  ///洗弃牌堆响应
  /// </summary>
  public sealed partial class MessUpDiscardHeapReceive : pb::IMessage<MessUpDiscardHeapReceive>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MessUpDiscardHeapReceive> _parser = new pb::MessageParser<MessUpDiscardHeapReceive>(() => new MessUpDiscardHeapReceive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MessUpDiscardHeapReceive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::QiLieGuaner.UNOGame.MsgUNOGameReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessUpDiscardHeapReceive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessUpDiscardHeapReceive(MessUpDiscardHeapReceive other) : this() {
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MessUpDiscardHeapReceive Clone() {
      return new MessUpDiscardHeapReceive(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    /// <summary>
    ///时间戳
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MessUpDiscardHeapReceive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MessUpDiscardHeapReceive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MessUpDiscardHeapReceive other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
