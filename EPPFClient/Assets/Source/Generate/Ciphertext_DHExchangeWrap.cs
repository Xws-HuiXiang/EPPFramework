//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Ciphertext_DHExchangeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Ciphertext.DHExchange), typeof(System.Object));
		L.RegFunction("GenerateKeyPair", GenerateKeyPair);
		L.RegFunction("GenerateKeySecret", GenerateKeySecret);
		L.RegFunction("GetString", GetString);
		L.RegFunction("New", _CreateCiphertext_DHExchange);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("DH_KEY_LENGTH", get_DH_KEY_LENGTH, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateCiphertext_DHExchange(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Ciphertext.DHExchange obj = new Ciphertext.DHExchange();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Ciphertext.DHExchange.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GenerateKeyPair(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			Ciphertext.DHExchange.GenerateKeyPair(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GenerateKeySecret(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			byte[] o = Ciphertext.DHExchange.GenerateKeySecret(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			string o = Ciphertext.DHExchange.GetString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DH_KEY_LENGTH(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Ciphertext.DHExchange.DH_KEY_LENGTH);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

