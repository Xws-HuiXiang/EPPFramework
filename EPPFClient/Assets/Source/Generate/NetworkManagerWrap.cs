//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NetworkManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NetworkManager), typeof(MonoSingleton<NetworkManager>));
		L.RegFunction("Init", Init);
		L.RegFunction("AddProtocolHandle", AddProtocolHandle);
		L.RegFunction("Connection", Connection);
		L.RegFunction("SendMsgFromLua", SendMsgFromLua);
		L.RegFunction("SetSecretKey", SetSecretKey);
		L.RegFunction("SetMsgSecretKey", SetMsgSecretKey);
		L.RegFunction("SetMsgPrivateKey", SetMsgPrivateKey);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("PING_INTERVAL", 30);
		L.RegVar("PublicKey", get_PublicKey, null);
		L.RegVar("SecretKey", get_SecretKey, null);
		L.RegVar("MsgPrivateKey", get_MsgPrivateKey, null);
		L.RegVar("MsgSecretKey", get_MsgSecretKey, null);
		L.RegVar("IsConnection", get_IsConnection, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			NetworkManager.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddProtocolHandle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			System.Action<LuaInterface.LuaByteBuffer> arg2 = (System.Action<LuaInterface.LuaByteBuffer>)ToLua.CheckDelegate<System.Action<LuaInterface.LuaByteBuffer>>(L, 3);
			NetworkManager.AddProtocolHandle(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connection(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			obj.Connection();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMsgFromLua(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			NetworkManager obj = (NetworkManager)ToLua.CheckObject<NetworkManager>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			LuaByteBuffer arg2 = new LuaByteBuffer(ToLua.CheckByteBuffer(L, 4));
			obj.SendMsgFromLua(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSecretKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			NetworkManager.SetSecretKey(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMsgSecretKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			NetworkManager.SetMsgSecretKey(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMsgPrivateKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
			NetworkManager.SetMsgPrivateKey(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PublicKey(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, NetworkManager.PublicKey);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SecretKey(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, NetworkManager.SecretKey);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MsgPrivateKey(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NetworkManager.MsgPrivateKey);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MsgSecretKey(IntPtr L)
	{
		try
		{
			ToLua.Push(L, NetworkManager.MsgSecretKey);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsConnection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			NetworkManager obj = (NetworkManager)o;
			bool ret = obj.IsConnection;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index IsConnection on a nil value");
		}
	}
}

