//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DownloadManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DownloadManager), typeof(MonoSingleton<DownloadManager>));
		L.RegFunction("DownloadServerHotfixAsync", DownloadServerHotfixAsync);
		L.RegFunction("DownloadFile", DownloadFile);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownloadServerHotfixAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Action arg4 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				DownloadManager.DownloadServerHotfixAsync(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else if (count == 6)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Action arg4 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				System.Action<HotfixFileType,string,byte[]> arg5 = (System.Action<HotfixFileType,string,byte[]>)ToLua.CheckDelegate<System.Action<HotfixFileType,string,byte[]>>(L, 6);
				DownloadManager.DownloadServerHotfixAsync(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 7)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
				System.Action arg4 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 5);
				System.Action<HotfixFileType,string,byte[]> arg5 = (System.Action<HotfixFileType,string,byte[]>)ToLua.CheckDelegate<System.Action<HotfixFileType,string,byte[]>>(L, 6);
				System.Action<float> arg6 = (System.Action<float>)ToLua.CheckDelegate<System.Action<float>>(L, 7);
				DownloadManager.DownloadServerHotfixAsync(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: DownloadManager.DownloadServerHotfixAsync");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DownloadFile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			System.Action<byte[]> arg1 = (System.Action<byte[]>)ToLua.CheckDelegate<System.Action<byte[]>>(L, 2);
			System.Action<float> arg2 = (System.Action<float>)ToLua.CheckDelegate<System.Action<float>>(L, 3);
			DownloadManager.DownloadFile(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

